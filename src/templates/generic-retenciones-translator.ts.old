export class GenericRetencionesTranslator implements DocumentTranslatorInterface<RetencionesData> {
  protected contentService(service: CNodeInterface): TableCell[][] {
    const tableService: TableCell[][] = [];
    // SubHeaders per service
    tableService.push(
      [
        {
          text: 'FORMA DE PAGO',
          style: 'tableSubHeader',
          fillColor: '#eeeeff',
          alignment: 'left',
        },
        {
          text: 'TIPO DE SERVICIO',
          style: 'tableSubHeader',
          fillColor: '#eeeeff',
          alignment: 'left',
        },
        {
          text: 'FECHA DE PAGO',
          style: 'tableSubHeader',
          fillColor: '#eeeeff',
          alignment: 'left',
        },
        {
          text: 'PRECIO DE SERVICIO',
          style: 'tableSubHeader',
          fillColor: '#eeeeff',
          alignment: 'left',
        },
      ],
      [
        service.get('FormaPagoServ'),
        service.get('TipoDeServ'),
        service.get('FechaServ'),
        formatCurrency(service.get('PrecioServSinIVA')),
      ],
    );

    if (service.offsetExists('SubTipServ') || service.offsetExists('RFCTerceroAutorizado')) {
      tableService.push(
        [
          {
            text: 'SUBTIPO DE SERVICIO',
            style: 'tableSubHeader',
            fillColor: '#eeeeff',
            alignment: 'left',
          },
          {
            text: 'RFC TERCERO AUTORIZADO',
            style: 'tableSubHeader',
            fillColor: '#eeeeff',
            alignment: 'left',
          },
          '',
          '',
        ],
        [service.get('SubTipServ'), service.get('RFCTerceroAutorizado'), '', ''],
      );
    }

    const impuestosTrasladadosDelServicio = service.searchNode(
      'plataformasTecnologicas:ImpuestosTrasladadosdelServicio',
    );
    const contribucionGubernamental = service.searchNode(
      'plataformasTecnologicas:ContribucionGubernamental',
    );
    const comisionDelServicio = service.searchNode('plataformasTecnologicas:ComisionDelServicio');

    if (impuestosTrasladadosDelServicio) {
      tableService.push([
        {
          style: 'tableContent',
          margin: 3,
          table: {
            widths: ['*', '*', '*', '*', '*'],
            body: [
              [
                {
                  text: 'IMPUESTOS TRASLADADOS DEL SERVICIO',
                  style: 'tableHeader',
                  colSpan: 5,
                  alignment: 'center',
                },
                {},
                {},
                {},
                {},
              ],
              [
                {
                  text: 'IMPUESTO BASE',
                  style: 'tableSubHeader',
                  fillColor: '#eeeeff',
                  alignment: 'left',
                },
                {
                  text: 'IMPUESTO',
                  style: 'tableSubHeader',
                  fillColor: '#eeeeff',
                  alignment: 'left',
                },
                {
                  text: 'TIPO FACTOR',
                  style: 'tableSubHeader',
                  fillColor: '#eeeeff',
                  alignment: 'left',
                },
                {
                  text: 'TASA O CUOTA',
                  style: 'tableSubHeader',
                  fillColor: '#eeeeff',
                  alignment: 'left',
                },
                {
                  text: 'IMPORTE',
                  style: 'tableSubHeader',
                  fillColor: '#eeeeff',
                  alignment: 'left',
                },
              ],
              [
                formatCurrency(impuestosTrasladadosDelServicio.get('Base')),
                impuestosTrasladadosDelServicio.get('Impuesto'),
                impuestosTrasladadosDelServicio.get('TipoFactor'),
                impuestosTrasladadosDelServicio.get('TasaCuota'),
                formatCurrency(impuestosTrasladadosDelServicio.get('Importe')),
              ],
            ],
          },
          layout: this.tableLayoutBordered(),
          colSpan: 4,
        },
        {},
        {},
        {},
      ]);
    }

    if (contribucionGubernamental) {
      tableService.push([
        {
          style: 'tableContent',
          margin: 3,
          table: {
            widths: ['*', '*'],
            body: [
              [
                {
                  text: 'CONTRIBUCIÓN GUBERNAMENTAL',
                  style: 'tableHeader',
                  colSpan: 2,
                  alignment: 'center',
                },
                {},
              ],
              [
                {
                  text: 'ESTADO',
                  style: 'tableSubHeader',
                  fillColor: '#eeeeff',
                  alignment: 'left',
                },
                {
                  text: 'IMPORTE',
                  style: 'tableSubHeader',
                  fillColor: '#eeeeff',
                  alignment: 'left',
                },
              ],
              [
                contribucionGubernamental.get('EntidadDondePagaLaContribucion'),
                formatCurrency(contribucionGubernamental.get('ImpContrib')),
              ],
            ],
          },
          layout: this.tableLayoutBordered(),
          colSpan: 4,
        },
        {},
        {},
        {},
      ]);
    }

    if (comisionDelServicio) {
      tableService.push([
        {
          style: 'tableContent',
          margin: 3,
          table: {
            widths: ['*', '*', '*'],
            body: [
              [
                {
                  text: 'COMISIÓN DEL SERVICIO',
                  style: 'tableHeader',
                  colSpan: 3,
                  alignment: 'center',
                },
                {},
                {},
              ],
              [
                {
                  text: 'BASE',
                  style: 'tableSubHeader',
                  fillColor: '#eeeeff',
                  alignment: 'left',
                },
                {
                  text: 'PORCENTAJE',
                  style: 'tableSubHeader',
                  fillColor: '#eeeeff',
                  alignment: 'left',
                },
                {
                  text: 'IMPORTE',
                  style: 'tableSubHeader',
                  fillColor: '#eeeeff',
                  alignment: 'left',
                },
              ],
              [
                formatCurrency(comisionDelServicio.get('Base')),
                comisionDelServicio.get('Porcentaje'),
                formatCurrency(comisionDelServicio.get('Importe')),
              ],
            ],
          },
          layout: this.tableLayoutBordered(),
          colSpan: 4,
        },
        {},
        {},
        {},
      ]);
    }

    return tableService;
  }

  protected generateContentPerService(servicios: CNodes): TableCell[][] {
    const tableServices: TableCell[][] = [];
    // Header global
    tableServices.push([
      {
        text: 'SERVICIOS',
        style: 'tableHeader',
        alignment: 'center',
      },
    ]);
    // Per Services
    for (const servicio of servicios) {
      tableServices.push([
        {
          margin: 5,
          style: 'tableContent',
          table: {
            widths: ['*', '*', '*', '*'],
            body: this.contentService(servicio),
          },
          layout: this.tableLayoutBordered(),
        },
      ]);
    }

    return tableServices;
  }

  protected generatePlataformasTecnologicas(plataformasTecnologicas: CNodeInterface): Content {
    const servicios = plataformasTecnologicas.searchNodes(
      'plataformasTecnologicas:Servicios',
      'plataformasTecnologicas:DetallesDelServicio',
    );
    const bodyPlataformasTecnologicas: TableCell[][] = [];

    bodyPlataformasTecnologicas.push(
      // Header global
      [
        {
          text: 'SERVICIO MEDIANTE PLATAFORMAS TECNOLÓGICAS',
          style: 'tableHeader',
          colSpan: 5,
          alignment: 'center',
        },
        {},
        {},
        {},
        {},
      ],
      // SubHeaders of global
      [
        {
          text: 'VERSION',
          fillColor: '#eeeeff',
          style: 'tableSubHeader',
          alignment: 'left',
        },
        {
          text: 'PERIODICIDAD',
          fillColor: '#eeeeff',
          style: 'tableSubHeader',
          alignment: 'left',
        },
        {
          text: 'NUMERO SERVICIOS',
          fillColor: '#eeeeff',
          style: 'tableSubHeader',
          alignment: 'left',
        },
        {
          text: 'SUBTOTAL OPERACIONES',
          fillColor: '#eeeeff',
          style: 'tableSubHeader',
          alignment: 'left',
        },
        {
          text: 'TOTAL IVA',
          fillColor: '#eeeeff',
          style: 'tableSubHeader',
          alignment: 'left',
        },
      ],
      [
        plataformasTecnologicas.get('Version'),
        plataformasTecnologicas.get('Periodicidad'),
        plataformasTecnologicas.get('NumServ'),
        formatCurrency(plataformasTecnologicas.get('MonTotServSIVA')),
        formatCurrency(plataformasTecnologicas.get('TotalIVATrasladado')),
      ],
      [
        {
          text: 'TOTAL IVA RETENIDO',
          fillColor: '#eeeeff',
          style: 'tableSubHeader',
          alignment: 'left',
        },
        {
          text: 'TOTAL ISR RETENIDO',
          fillColor: '#eeeeff',
          style: 'tableSubHeader',
          alignment: 'left',
        },
        {
          text: 'DIFERENCIA IVA',
          fillColor: '#eeeeff',
          style: 'tableSubHeader',
          alignment: 'left',
        },
        {
          text: 'TOTAL USO DE PLATAFORMA',
          fillColor: '#eeeeff',
          style: 'tableSubHeader',
          alignment: 'left',
        },
        {
          text: 'TOTAL CONTRIBUCIÓN GUBERNAMENTAL',
          fillColor: '#eeeeff',
          style: 'tableSubHeader',
          alignment: 'left',
        },
      ],
      [
        formatCurrency(plataformasTecnologicas.get('TotalIVARetenido')),
        formatCurrency(plataformasTecnologicas.get('TotalISRRetenido')),
        formatCurrency(plataformasTecnologicas.get('DifIVAEntregadoPrestServ')),
        formatCurrency(plataformasTecnologicas.get('MonTotalporUsoPlataforma')),
        plataformasTecnologicas.get('MonTotalContribucionGubernamental') === ''
          ? ''
          : formatCurrency(plataformasTecnologicas.get('MonTotalContribucionGubernamental')),
      ],
    );

    if (servicios.length > 0) {
      bodyPlataformasTecnologicas.push([
        {
          style: 'tableContent',
          margin: 3,
          table: {
            widths: ['*'],
            body: this.generateContentPerService(servicios),
          },
          layout: this.tableLayoutBordered(),
          colSpan: 5,
        },
        {},
        {},
        {},
        {},
      ]);
    }

    return {
      style: 'tableContent',
      table: {
        widths: ['*', '*', '*', '*', '*'],
        body: bodyPlataformasTecnologicas,
      },
      layout: this.tableLayoutBordered(),
    };
  }

  protected generateContent(data: RetencionesData): Content {
    const retenciones = data.retenciones();
    const plataformasTecnologicas = retenciones.searchNode(
      'retenciones:Complemento',
      'plataformasTecnologicas:ServiciosPlataformasTecnologicas',
    );
    const content: Content[] = [];

    if (plataformasTecnologicas) {
      content.push(this.generatePlataformasTecnologicas(plataformasTecnologicas), '\n');
    }

    return content;
  }
}
